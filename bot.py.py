from config_reader import config
import asyncio
import logging
from aiogram import Bot, Dispatcher,types
from aiogram.filters.command import Command
from aiogram import types
from aiogram.filters import Command
from aiogram.filters import CommandObject
from aiogram import html
from datetime import datetime
from aiogram import F
from aiogram.utils.markdown import hide_link
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from typing import Optional
from aiogram.filters.callback_data import CallbackData
from magic_filter import F
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.utils.callback_answer import CallbackAnswer
from handlers import group_games,usernames,Rock_Paper_Scissors
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="HTML")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
dp.include_routers(usernames.router,group_games.router,Rock_Paper_Scissors.router)
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("Hello!")
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.answer("–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply("–û—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    dp.message.register(cmd_reply, Command("test2"))
@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")
@dp.message(Command("test"))
async def any_message(message: types.Message):
    await message.answer("Hello, <b>world</b>!", parse_mode="HTML")
    await message.answer("Hello, *world*\!", parse_mode="MarkdownV2")
@dp.message(Command("name"))
async  def cmd_name(message: types.Message, command:CommandObject):
    if command.args:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(html.quote(command.args))}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name")
# @dp.message(F.text)
# async def echo_with_time(message: types.Message):
#     time_now=datetime.now().strftime('%H:%M')
#     added_text=html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
#     await message.answer(f"{message.html_text}\n\n{added_text}", parse_mode="HTML")
# @dp.message(F.text)
# async def extract_data(message: types.Message):
#     data={
#         "url":"<N/A>",
#         "email":"<N/A>",
#         "code":"<N/A>"
#     }
#     entities=message.entities or []
#     for item in entities:
#         if item.type in data.keys():
#             # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
#             # data[item.type] = message.text[item.offset : item.offset+item.length]
#             #–ü—Ä–∞–≤–∏–ª—å–Ω–æ
#             data[item.type]=item.extract_from(message.text)
#     await message.reply(
#         "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
#         f"URL:{html.quote(data['url'])}\n"
#         f"Email:{html.quote(data['email'])}"
#         f"–ü–∞—Ä–æ–ª—å:{html.quote(data['code'])}"
#     )
# @dp.message(F.sticker)
# async def echo_smile(message:types.Message):
#     await message.reply_sticker(message.sticker.file_id)
# @dp.message(Command("images"))
# async def upload_photo(message:types.Message):
#     file_ids=[]
#     with open("sniper.png","rb") as image_from_buffer:
#         result=await message.answer_photo(
#         BufferedInputFile(image_from_buffer.read(),filename="sniper.png"),caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ—Ñ–µ—Ä–∞")
#         file_ids.append(result.photo[-1].file_id)
#     image_from_pc=FSInputFile("sniper.png")
#     result=await message.answer_photo(image_from_pc,caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
#     file_ids.append(result.photo[-1].file_id)
#     image_from_url=URLInputFile("https://yandex.ru/images/search?text=%D0%A4%D0%9E%D0%A2%D0%9A%D0%90&pos=0&rpt=simage&img_url=https%3A%2F%2Fsteamuserimages-a.akamaihd.net%2Fugc%2F5085158533761058065%2FD572CC315D04FAD42F0331EC379869258927B4B1%2F%3Fimw%3D512%26amp%3Bimh%3D384%26amp%3Bima%3Dfit%26amp%3Bimpolicy%3DLetterbox%26amp%3Bimcolor%3D%2523000000%26amp%3Bletterbox%3Dtrue&from=tabbar&lr=142630")
#     result= await message.answer_photo(image_from_url,caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ")
#     file_ids.append(result.photo[-1].file_id)
#     await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n "+"\n".join(file_ids))
# @dp.message(F.photo)
# async def download_photo(message: types.message, bot:Bot):
#     await bot.download(
#         message.photo[-1],
#         destination=f"C:\\Users\\ayrat\\Downloads{message.photo[-1].file_id}.jpg"
#     )
# @dp.message(F.sticker)
# async def download_sticker(message:types.Message, bot:Bot):
#     await bot.download(
#         message.sticker,
#         destination=f"C:\\Users\\ayrat\\Downloads{message.sticker.file_id}.webp"
#     )
# @dp.message(F.new_chat_members)
# async def somebody_added(message: types.Message):
#     for user in message.new_chat_members:
#         await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")
# @dp.message(Command("hidden_link"))
# async def cmd_hidden_link(message: types.Message):
#     await message.answer(
#         f"{hide_link('https://telegra.ph/file/562a512448876923e28c3.png')}"
#         f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram: *—Å—É—â–µ—Å—Ç–≤—É–µ—Ç*\n"
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *–Ω–µ —á–∏—Ç–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é*\n"
#         f"–ì—Ä—É—à–∞:"
#     )
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     kb=[
#         [
#         types.KeyboardButton(text="–ü–∞–º–ø–∞—Ä–∞–º"),
#         types.KeyboardButton(text="–ò–∑–∏ –∏–∑–∏ –∏–∑–∏ –¥–ª—è –ø–∞–ø–∏–∑–∏")
#         ]
#     ]
#     keyboard=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
#     await message.answer("–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–∞–ø–∏—á", reply_markup=keyboard)
# @dp.message(F.text.lower() == "–ø–∞–º–ø–∞—Ä–∞–º")
# async def with_puree(message: types.Message):
#     await message.reply("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ—Ö —Å–º–æ—Ç—Ä—è—â–∏—Ö")

# @dp.message(F.text.lower() == "–∏–∑–∏ –∏–∑–∏ –∏–∑–∏ –¥–ª—è –ø–∞–ø–∏–∑–∏")
# async def without_puree(message: types.Message):
#     await message.reply("–ù–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê")
# @dp.message(Command("reply_builder"))
# async def reply_builder(message: types.Message):
#     builder = ReplyKeyboardBuilder()
#     for i in range(1, 17):
#         builder.add(types.KeyboardButton(text=str(i)))
#     builder.adjust(4)
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
#         reply_markup=builder.as_markup(resize_keyboard=True),
#     )
    
# @dp.message(Command("special_buttons"))
# async def cmd_special_buttons(message: types.Message):
#     builder = ReplyKeyboardBuilder()
#     builder.row(types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",request_contact=True))
#     builder.row(types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", request_poll=types.KeyboardButtonPollType(type="quiz")))
#     builder.row(types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", request_user=types.KeyboardButtonRequestUser(request_id=1,user_is_premium=1)),types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ä—É–º–∞–º–∏",request_chat=types.KeyboardButtonRequestChat(request_id=2,chat_is_channel=False,chat_is_forum=True)))
#     await message.answer("–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",reply_markup=builder.as_markup(resize_keyboard=True))
# @dp.message(F.user_shared)
# async def on_user_shared(message: types.Message):
#     print(f"Request {message.user_shared.request_id}"
#           f"User ID {message.user_shared.user_id}")
# @dp.message(F.char_shared)
# async def on_user_share(message: types.Message):
#     print(f"Request {message.chat_shared.request_id}"
#           f"Chat ID {message.chat_shared.chat_id}")
# @dp.message(Command("inline_url"))
# async def cmd_inline_url(message: types.Message,bot:Bot):
#     builder = InlineKeyboardBuilder()
#     builder.row(types.InlineKeyboardButton(text="Github",url="https://github.com/dashboard"))
#     builder.row(types.InlineKeyboardButton(text="–û—Ñ.–∫–∞–Ω–∞–ª Telegram",url="tg://resolve?domain=telegram"))
    # user_id=1234567890
    # chat_info=await bot.get_chat(user_id)
    # if not chat_info.has_private_forwards:
    #     builder.row(types.InlineKeyboardButton(text="–ö–∞–∫–æ–π-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",url=f"tg://user?id={user_id}"))
    # await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É",reply_markup=builder.as_markup())
@dp.message(Command("random"))
async def cmd_random(message : types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∂–º–∏ –º–µ–Ω—è",
        callback_data="random_value")
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100",reply_markup=builder.as_markup())
@dp.callback_query(F.data == "random_value")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer((str(random.randint(1,100))))
    await callback.answer()
userdata={}
# def get_keyboard():
#     buttons=[
#         [
#             types.InlineKeyboardButton(text="-1",callback_data="num_decr"),
#             types.InlineKeyboardButton(text="+1",callback_data="num_incr")
#         ],
#             [types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data="num_finish")]
#         ]
#     keyboard=types.InlineKeyboardMarkup(inline_keyboard=buttons)
#     return keyboard
# async def update_num_text(message: types.Message,new_value: int):
#     with suppress(TelegramBadRequest):
#         await message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:{new_value}",reply_markup=get_keyboard())
# @dp.message(Command("numbers"))
# async def cmd_numbers(message: types.Message):
#     userdata[message.from_user.id]=0
#     await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0",reply_markup=get_keyboard())
# @dp.callback_query(F.data.startswith("num_"))
# async def callbacks_num(callback:types.CallbackQuery):
#     user_value=userdata.get(callback.from_user.id,0)
#     action=callback.data.split("_")[1]
#     if action == "incr":
#         userdata[callback.from_user.id]=user_value+1
#         await update_num_text(callback.message, user_value+1)
#     elif action == "decr":
#         userdata[callback.from_user.id]=user_value-1
#         await update_num_text(callback.message,user_value-1)
#     elif action=="finish":
#         await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
#     await callback.answer()
class NumbersCallbackFactory(CallbackData,prefix="fabnum"):
    action: str
    value:Optional[int]=None
def get_keyboard_fab():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="-2", callback_data=NumbersCallbackFactory(action="change", value=-2)
    )
    builder.button(
        text="-1", callback_data=NumbersCallbackFactory(action="change", value=-1)
    )
    builder.button(
        text="+1", callback_data=NumbersCallbackFactory(action="change", value=1)
    )
    builder.button(
        text="+2", callback_data=NumbersCallbackFactory(action="change", value=2)
    )
    builder.button(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=NumbersCallbackFactory(action="finish")
    )
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Ä—è–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å 4 + 1
    builder.adjust(4)
    return builder.as_markup()
async def update_num_text_fab(message: types.Message, new_value: int):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
            reply_markup=get_keyboard_fab()
        )

@dp.message(Command("numbers_fab"))
async def cmd_numbers_fab(message: types.Message):
    userdata[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard_fab())
@dp.callback_query(NumbersCallbackFactory.filter())
async def callback_num_change_fab(callback:types.CallbackQuery, callback_data:NumbersCallbackFactory):
    user_value=userdata.get(callback.from_user.id,0)
    if callback_data.action == "change":
        userdata[callback.from_user.id]=user_value+callback_data.value
        await update_num_text_fab(callback.message,user_value+callback_data.value)
    else:
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    await callback.answer()
@dp.callback_query(NumbersCallbackFactory.filter())
async def callbacks_num_change_fab(
        callback: types.CallbackQuery, 
        callback_data: NumbersCallbackFactory
):
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_value = userdata.get(callback.from_user.id, 0)
    # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    if callback_data.action == "change":
        userdata[callback.from_user.id] = user_value + callback_data.value
        await update_num_text_fab(callback.message, user_value + callback_data.value)
    # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω—É–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å
    else:
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    await callback.answer()
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
    